#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>

#define MAX_INPUT 1024
#define MAX_ARGS 64
#define DELIM " \t\r\n"

// Function prototypes
void execute_command(char *args[], int input_fd, int output_fd, int append_fd);
void parse_and_execute(char *input);
void redirect_io(char *args[], int *input_fd, int *output_fd, int *append_fd);

// Shell main loop
int main() {
    char input[MAX_INPUT];

    while (1) {
        printf("myshell> ");
        fflush(stdout);

        if (fgets(input, MAX_INPUT, stdin) == NULL) {
            printf("\n");
            break;
        }

        // Remove trailing newline
        input[strcspn(input, "\n")] = 0;

        if (strcmp(input, "exit") == 0) {
            break;
        }

        parse_and_execute(input);
    }

    return 0;
}

// Function to parse input and execute commands
void parse_and_execute(char *input) {
    char *commands[MAX_ARGS];
    char *cmd = strtok(input, "|");
    int cmd_count = 0;

    while (cmd != NULL) {
        commands[cmd_count++] = cmd;
        cmd = strtok(NULL, "|");
    }
    commands[cmd_count] = NULL;

    int input_fd = 0, output_fd = 1, append_fd = -1, fd[2];

    for (int i = 0; i < cmd_count; i++) {
        char *args[MAX_ARGS];
        char *token = strtok(commands[i], DELIM);
        int arg_count = 0;

        while (token != NULL) {
            args[arg_count++] = token;
            token = strtok(NULL, DELIM);
        }
        args[arg_count] = NULL;

        redirect_io(args, &input_fd, &output_fd, &append_fd);

        if (i < cmd_count - 1) {
            pipe(fd);
            output_fd = fd[1];
        }

        execute_command(args, input_fd, output_fd, append_fd);

        if (input_fd != 0) close(input_fd);
        if (output_fd != 1) close(output_fd);
        if (append_fd != -1) close(append_fd);

        input_fd = fd[0];
    }
}

// Function to execute a single command
void execute_command(char *args[], int input_fd, int output_fd, int append_fd) {
    pid_t pid = fork();

    if (pid == 0) {
        if (input_fd != 0) {
            dup2(input_fd, 0);
            close(input_fd);
        }
        if (output_fd != 1) {
            dup2(output_fd, 1);
            close(output_fd);
        }
        if (append_fd != -1) {
            dup2(append_fd, 1);
            close(append_fd);
        }

        execvp(args[0], args);
        perror("execvp failed");
        exit(1);
    } else if (pid > 0) {
        wait(NULL);
    } else {
        perror("fork failed");
    }
}

// Function to handle input/output redirection
void redirect_io(char *args[], int *input_fd, int *output_fd, int *append_fd) {
    for (int i = 0; args[i] != NULL; i++) {
        if (strcmp(args[i], "[") == 0) {
            *input_fd = open(args[i + 1], O_RDONLY);
            args[i] = NULL;
        } else if (strcmp(args[i], "]") == 0) {
            *output_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
            args[i] = NULL;
        } else if (strcmp(args[i], "]]") == 0) {
            *append_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_APPEND, 0644);
            args[i] = NULL;
        }
    }
}
